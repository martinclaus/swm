FC = @FC@
FCFLAGS = @FCFLAGS@
FCFLAGS_f90 = @FCFLAGS_f90@
FC_MODEXT = @FC_MODEXT@
FC_MODINC = @FC_MODINC@
FC_MODOUT = @FC_MODOUT@
OBJEXT = @OBJEXT@
CPPFLAGS = @CPPFLAGS@
FC_DEFINE = @FC_DEFINE@

OPENMP_FCFLAGS = @OPENMP_FCFLAGS@

SED = @SED@
MKDIR = @MKDIR_P@

LIBOBJS = @LIBOBJS@

SET_MAKE = @SET_MAKE@

EXEEXT = @EXEEXT@

SHELL:=/bin/bash

srcdir = @srcdir@
prefix = $(CURDIR)/
bindir = $(prefix)bin/
builddir = $(prefix)build/
docdir = $(srcdir)/doc/
includedir = $(srcdir)/include/
sdir = $(srcdir)/src/
selfcheck_dir = $(srcdir)/selfcheck/

VPATH = $(srcdir):$(sdir):$(includedir)

include_modelHeader = $(includedir)

bin_PROGRAMS = model$(EXEEXT)

O := $(OPENMP_FCFLAGS)
DEBUG = #-Wall #-g
FFLAGS = $(FCFLAGS) $(FCFLAGS_f90) $(defSelfCheck) $(DEBUG) $(O)
libnc = @NCLIB@ -lnetcdf -lnetcdff
includenc = $(FC_MODINC)@NCINC@
DOXYGEN = @DOXYGEN@

LDFLAGS = @LDFLAGS@ @LIBS@ $(libnc)

COMPILE = $(FC) $(FFLAGS) $(CPPFLAGS) $(defClElSolv) $(includenc) $(FC_MODINC)$(builddir) $(include_selfcheck) $(FC_MODINC)$(includedir) -c $< $(FC_MODOUT)$(builddir) -o$(builddir)$@

# conditional modules
ifeq ($(strip @ELSOLV@), SOR)
  $(info Elliptic solver used by calc_lib module: SOR)
  cl_elsolv := ElSolv_SOR
  cl_elsolv.$(OBJEXT) := ElSolv_SOR.$(OBJEXT)
  defClElSolv := $(FC_DEFINE)'CALC_LIB_ELLIPTIC_SOLVER=ElSolv_SOR'
  defClElSolv += $(FC_DEFINE)'CALC_LIB_ELLIPTIC_SOLVER_HEADER="ElSolv_SOR.h"'
else
  $(info Elliptic solver used by calc_lib module: none)
endif

modules = str vars_module calendar_module diag_module swm_module tracer_module tracer_vars io_module calc_lib dynFromFile_module $(cl_elsolv) memchunk_module swm_vars swm_forcing_module swm_timestep_module swm_damping_module swm_lateralmixing_module generic_list diagTask diagVar domain_module grid_module f_udunits_2 time_integration_module types init_vars logging adios2

objects = $(modules:%=$(builddir)%.$(OBJEXT))


.PHONY: all clean clean-selfcheck clean-doc selfcheck doc distclean clean-conf

all     : $(bin_PROGRAMS)

$(builddir):
	$(MKDIR) $(builddir)

$(bindir):
	$(MKDIR) $(bindir)

model$(EXEEXT)   : $(modules:%=%.$(OBJEXT)) model.$(OBJEXT) $(bindir)
	$(FC) $(FFLAGS) -o$(bindir)$@ $(objects) $(builddir)model.$(OBJEXT) $(LDFLAGS) $(libcu)

model.$(OBJEXT) : model.f90 io_module.$(OBJEXT) vars_module.$(OBJEXT) domain_module.$(OBJEXT) calc_lib.$(OBJEXT) diag_module.$(OBJEXT) dynFromFile_module.$(OBJEXT) swm_module.$(OBJEXT) tracer_module.$(OBJEXT) model.h io.h
	$(COMPILE)

types.$(OBJEXT) : types.f90 types.h
	$(COMPILE)

init_vars.$(OBJEXT) : init_vars.f90 types.$(OBJEXT) model.h
	$(COMPILE)

vars_module.$(OBJEXT) : vars_module.f90 generic_list.$(OBJEXT) domain_module.$(OBJEXT) str.$(OBJEXT) types.$(OBJEXT) init_vars.$(OBJEXT) logging.$(OBJEXT) io.h
	$(COMPILE)

time_integration_module.$(OBJEXT) : time_integration_module.f90 vars_module.$(OBJEXT) io.h model.h types.$(OBJEXT) domain_module.$(OBJEXT)
	$(COMPILE)

f_udunits_2.$(OBJEXT) : f_udunits_2.f90 f_udunits_2.inc
	$(COMPILE)

calendar_module.$(OBJEXT) : calendar_module.f90 f_udunits_2.$(OBJEXT) io.h types.$(OBJEXT) logging.$(OBJEXT)
	$(COMPILE)

swm_module.$(OBJEXT) : swm_module.f90 model.h vars_module.$(OBJEXT) io_module.$(OBJEXT) swm_vars.$(OBJEXT) swm_forcing_module.$(OBJEXT) swm_timestep_module.$(OBJEXT) swm_damping_module.$(OBJEXT) domain_module.$(OBJEXT) types.$(OBJEXT) logging.$(OBJEXT)
	$(COMPILE)

diag_module.$(OBJEXT) : diag_module.f90 vars_module.$(OBJEXT) diagTask.$(OBJEXT) model.h
	$(COMPILE)

diagTask.$(OBJEXT) : diagTask.f90 io.h model.h diag_module.h io_module.$(OBJEXT) vars_module.$(OBJEXT) domain_module.$(OBJEXT) diagVar.$(OBJEXT) generic_list.$(OBJEXT) str.$(OBJEXT) types.$(OBJEXT) init_vars.$(OBJEXT) logging.$(OBJEXT)
	$(COMPILE)

diagVar.$(OBJEXT) : diagVar.f90 vars_module.$(OBJEXT) io.h domain_module.$(OBJEXT) calc_lib.$(OBJEXT) generic_list.$(OBJEXT) types.$(OBJEXT) init_vars.$(OBJEXT) logging.$(OBJEXT)
	$(COMPILE)

adios2.$(OBJEXT) : adios2.f90 types.$(OBJEXT) logging.$(OBJEXT)
	$(COMPILE)

io_module.$(OBJEXT) : io_module.f90 io.h calendar_module.$(OBJEXT) grid_module.$(OBJEXT) str.$(OBJEXT) types.$(OBJEXT) logging.$(OBJEXT)
	$(COMPILE)

ElSolv_SOR.$(OBJEXT) : ElSolv_SOR.f90 ElSolv_SOR.h vars_module.$(OBJEXT) domain_module.$(OBJEXT) model.h types.$(OBJEXT) logging.$(OBJEXT)
	$(COMPILE)

tracer_vars.$(OBJEXT) : tracer_vars.f90 tracer_module.h io.h generic_list.$(OBJEXT) io_module.$(OBJEXT) domain_module.$(OBJEXT) vars_module.$(OBJEXT) types.$(OBJEXT) init_vars.$(OBJEXT) logging.$(OBJEXT)
	$(COMPILE)

tracer_module.$(OBJEXT) : tracer_module.f90 model.h tracer_vars.$(OBJEXT) vars_module.$(OBJEXT) generic_list.$(OBJEXT) domain_module.$(OBJEXT) calc_lib.$(OBJEXT) time_integration_module.$(OBJEXT) types.$(OBJEXT) logging.$(OBJEXT)
	$(COMPILE)

calc_lib.$(OBJEXT) : calc_lib.f90 calc_lib.h vars_module.$(OBJEXT) domain_module.$(OBJEXT) model.h $(cl_elsolv.$(OBJEXT)) types.$(OBJEXT) init_vars.$(OBJEXT) logging.$(OBJEXT)
	$(COMPILE)

dynFromFile_module.$(OBJEXT) : dynFromFile_module.f90 vars_module.$(OBJEXT) calc_lib.$(OBJEXT) memchunk_module.$(OBJEXT) domain_module.$(OBJEXT) types.$(OBJEXT) logging.$(OBJEXT)
	$(COMPILE)

memchunk_module.$(OBJEXT) : memchunk_module.f90 io_module.$(OBJEXT) calc_lib.$(OBJEXT) domain_module.$(OBJEXT) types.$(OBJEXT) init_vars.$(OBJEXT) logging.$(OBJEXT)
	$(COMPILE)

swm_vars.$(OBJEXT) : swm_vars.f90 vars_module.$(OBJEXT) domain_module.$(OBJEXT) memchunk_module.$(OBJEXT) init_vars.$(OBJEXT) logging.$(OBJEXT)
	$(COMPILE)

swm_forcing_module.$(OBJEXT) : swm_forcing_module.f90 model.h swm_module.h io.h vars_module.$(OBJEXT) memchunk_module.$(OBJEXT) domain_module.$(OBJEXT) generic_list.$(OBJEXT) calc_lib.$(OBJEXT) init_vars.$(OBJEXT) logging.$(OBJEXT)
	$(COMPILE)

swm_timestep_module.$(OBJEXT) : swm_timestep_module.f90 model.h swm_module.h io.h swm_vars.$(OBJEXT) swm_damping_module.$(OBJEXT) swm_forcing_module.$(OBJEXT) swm_lateralmixing_module.$(OBJEXT) vars_module.$(OBJEXT) memchunk_module.$(OBJEXT) calc_lib.$(OBJEXT) domain_module.$(OBJEXT) grid_module.$(OBJEXT) time_integration_module.$(OBJEXT) logging.$(OBJEXT) interp.inc
	$(COMPILE)

swm_damping_module.$(OBJEXT) : swm_damping_module.f90 model.h swm_module.h swm_vars.$(OBJEXT) vars_module.$(OBJEXT) domain_module.$(OBJEXT) memchunk_module.$(OBJEXT) str.$(OBJEXT) init_vars.$(OBJEXT) logging.$(OBJEXT)
	$(COMPILE)

swm_lateralmixing_module.$(OBJEXT) : swm_lateralmixing_module.f90 model.h vars_module.$(OBJEXT) swm_vars.$(OBJEXT) domain_module.$(OBJEXT) grid_module.$(OBJEXT) calc_lib.$(OBJEXT) init_vars.$(OBJEXT) logging.$(OBJEXT)
	$(COMPILE)

domain_module.$(OBJEXT) : domain_module.f90 model.h grid_module.$(OBJEXT) io_module.$(OBJEXT) io.h types.$(OBJEXT) init_vars.$(OBJEXT)
	$(COMPILE)

grid_module.$(OBJEXT) : grid_module.f90 model.h types.$(OBJEXT) logging.$(OBJEXT)
	$(COMPILE)

logging.$(OBJEXT) : logging.f90 io.h str.$(OBJEXT)
	$(COMPILE)

%.$(OBJEXT) : %.f90
	$(COMPILE)

include $(selfcheck_dir)Makefile

doc : doc/Doxyfile doc/html doc/latex
	@cd $(docdir) && $(DOXYGEN) $(<F)
	@cd $(docdir)/latex && $(MAKE)


# create folder if needed

include/  :
	mkdir -p $@

doc/html :
	mkdir -p $@

doc/latex :
	mkdir -p $@

distclean : clean clean-doc clean-conf clean-selfcheck

clean-conf:
	@rm -fv config.status
	@rm -fv config.log
	@rm -fv Makefile

clean :
	@rm -fv $(builddir)*
	@rm -fv $(bindir)*

clean-doc :
	@rm -rvf $(docdir)latex $(docdir)html $(docdir)doxygen_objdb_*

clean-selfcheck :
	@rm -rf $(selfcheck_dir)*/output/new_*
	@rm -rf $(selfcheck_dir)utest_str/utest_str
